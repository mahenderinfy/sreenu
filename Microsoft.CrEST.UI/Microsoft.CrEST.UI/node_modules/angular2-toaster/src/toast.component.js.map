{"version":3,"sources":["../../src/toast.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,SAAA,EAAW,gBAAA,EAAkB,YAAA,EACnD,wBAAwB,EAAE,iBAAA,EAAkB,MAC3C,eAAA,CAAgB;AACrB,OAAO,EAAA,YAAE,EAAsB,MAAM,2BAAA,CAA4B;AAEjE,OAAO,EAAA,cAAE,EAAc,MAAM,kBAAA,CAAmB;AAIhD;IAWI,wBACU,SAAuB,EACvB,wBAAmD,EACnD,iBAAqC;QAFrC,cAAS,GAAT,SAAS,CAAc;QACvB,6BAAwB,GAAxB,wBAAwB,CAA2B;QACnD,sBAAiB,GAAjB,iBAAiB,CAAoB;QANxC,mBAAc,GAAG,cAAc,CAAC;QAChC,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IAMpC,CAAC;IAEJ,iCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACtF,CAAC;IACL,CAAC;IAED,wCAAe,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9D,IAAI,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACvF,IAAI,iBAAiB,GAAS,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC/G,iBAAiB,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC9C,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAC3C,CAAC;IACL,CAAC;IAED,8BAAK,GAAL,UAAM,KAAkB,EAAE,KAAY;QAClC,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACjB,KAAK,EAAG,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAC;SAC/C,CAAC,CAAC;IACP,CAAC;IA+BL,qBAAC;AAAD,CApEA,AAoEC;;AA9BM,yBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,aAAa;gBACvB,QAAQ,EAAE,gwBAYC;gBACX,OAAO,EAAE,CAAC,YAAY,CAAC;aAC1B,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,6BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,YAAY,GAAG;IACtB,EAAC,IAAI,EAAE,wBAAwB,GAAG;IAClC,EAAC,IAAI,EAAE,iBAAiB,GAAG;CAC1B,EAJ6F,CAI7F,CAAC;AACK,6BAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAG,EAAE,EAAE;CAC7F,CAAC","file":"toast.component.js","sourceRoot":"","sourcesContent":["import {Component, Input, ViewChild, ViewContainerRef, EventEmitter, \r\n    ComponentFactoryResolver, ChangeDetectorRef }\r\nfrom '@angular/core';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Toast} from './toast';\r\nimport {BodyOutputType} from './bodyOutputType';\r\n\r\n\r\n\r\nexport class ToastComponent {\r\n    \r\n     toast: Toast;\r\n     iconClass: string;\r\n     componentBody: ViewContainerRef;\r\n\r\n    safeCloseHtml: SafeHtml;\r\n\r\n    public bodyOutputType = BodyOutputType;\r\n    public clickEvent = new EventEmitter();\r\n\r\n    constructor(\r\n      private sanitizer: DomSanitizer,\r\n      private componentFactoryResolver : ComponentFactoryResolver,\r\n      private changeDetectorRef : ChangeDetectorRef\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.toast.closeHtml) {\r\n            this.safeCloseHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.closeHtml);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\r\n            let component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\r\n            let componentInstance : any = this.componentBody.createComponent(component, null, this.componentBody.injector);\r\n            componentInstance.instance.toast = this.toast;\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    click(event : MouseEvent, toast: Toast) {\r\n        event.stopPropagation();\r\n        this.clickEvent.emit({\r\n            value : { toast: toast, isCloseButton: true}\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: '[toastComp]',\r\n    template: `\r\n        <i class=\"toaster-icon\" [ngClass]=\"iconClass\"></i>\r\n        <div class=\"toast-content\">\r\n            <div [ngClass]=\"toast.toasterConfig.titleClass\">{{toast.title}}</div>\r\n            <div [ngClass]=\"toast.toasterConfig.messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\r\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"toast.body\"></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\r\n            [innerHTML]=\"safeCloseHtml\">\r\n        </div>`,\r\n    outputs: ['clickEvent']\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n{type: ComponentFactoryResolver, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toast': [{ type: Input },],\n'iconClass': [{ type: Input },],\n'componentBody': [{ type: ViewChild, args: ['componentBody', { read: ViewContainerRef }, ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}